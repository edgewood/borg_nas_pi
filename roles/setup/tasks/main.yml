---
#
# Update SSH config
#
- name: Update SSHD config
  template: src=sshdconfig.jinja2 dest=/etc/ssh/sshd_config
  notify: Restart sshd

#
# Configure packages
#
- name: Remove X11
  apt: name={{ item }} state=absent purge=yes
  with_items:
    - console-setup
    - desktop*
    - gnome*
    - gsfonts
    - gtk*
    - gvfs*
    - libgtk*
    - libqt*
    - libxcb*
    - libxfont*
    - libxt*
    - lightdm
    - lxde*
    - lxmenu*
    - lxpanel
    - omxplayer
    - openbox
    - penguinspuzzle
    - python3-tk
    - python-tk
    - scratch
    - shared-mime-info
    - x11*
    - xarchiver
    - xauth
    - xdg-*
    - xinit
    - xkb-data
    - xserver*

- name: Remove Raspberry Pi examples
  apt: name={{ item }} state=absent purge=yes
  with_items:
    - libraspberrypi-doc

- name: Install system packages
  apt: name={{ item }} state=latest
  with_items:
    - btrfs-tools
    - smartmontools

- name: Install Borg dependencies
  apt: name={{ item }} state=latest
  with_items:
    - python3
    - python3-dev
    - python3-pip
    - python-virtualenv
    - libssl-dev
    - openssl
    - libacl1-dev
    - libacl1
    - liblz4-dev
    - liblz4-1
    - build-essential

- name: Check if packages need to be autoremoved
  command: apt-get --dry-run autoremove
  register: check_autoremove
  changed_when: False

- name: Autoremove unused packages
  command: apt-get -y autoremove
  when: "'packages will be REMOVED' in check_autoremove.stdout"

- name: Upgrade system
  apt: update_cache=yes cache_valid_time=3600 upgrade=dist

#
# Create and configure borg user
#

- name: Create backup group
  group: name=backup

- name: Create borg account
  user: name=borg shell=/bin/bash group=backup

- name: Add SSH authorized key
  authorized_key: user=borg state=present key={{ lookup('file', 'naspi.pub') }}

#
# Install Borg
#

- name: Install Borg
  pip: executable=pip3 name=borgbackup version=0.29.0

#
# Configure system 
#

- name: Check if graphical boot is enabled
  command: systemctl get-default
  register: check_default_target
  changed_when: False

- name: Shut down graphical boot
  command: "{{ item }}"
  with_items:
  - systemctl set-default multi-user.target --force
  - systemctl disable lightdm.service --force
  - systemctl disable graphical.target --force
  - systemctl disable plymouth.service --force
  when: "'multi-user.target' not in check_default_target.stdout"

# state=mounted will create mount point and mount
- name: Set up mount point in fstab
  mount: name=/nas src="LABEL=/nas" fstype=btrfs state=mounted passno=2 opts=nofail

#
# Expand SD card.
# Do this last so that any errors above prevent this from running, as expanding
# the rootfs can be touchy.
#

- name: Test for total space
  # check if total space is less than 2G, which indicates that the rootfs hasn't
  # been expanded yet
  assert:
    that:
    - not {{ item.mount == '/' and ( item.size_total < 2*(1000*1000*1000) ) }}
  with_items: ansible_mounts
  ignore_errors: yes
  register: disk_total

- name: Expand SD card
  command: "/usr/bin/raspi-config --expand-rootfs"
  when: disk_total|failed
